
= simple_form_for @meeting do |f|
  - if @meeting.errors.any?
    #error_explanation
      %h2
        = pluralize(@meeting.errors.count, "error")
        prohibited this sales_rep from being saved:
      %ul
        - @meeting.errors.full_messages.each do |msg|
          %li= msg

  = f.input :start_date, as: :datetime
  = f.input :duration, :collection => (Meeting::DURATION)
  = f.input :memo, as: :text ,:input_html => { :rows => 4 }
  %br
  %hr



  %h4 Please Select Sales Resp to attend this meeting.
  - for sr in SalesRep.all
    = check_box_tag "sales_reps_ids[]" ,sr.id , @meeting.sales_reps.include?(sr)
    = sr.first_name
    %br
  %hr

  %h4 Please select the client that this meeting is made for
  = f.input :client_id, collection:(Client.all)
  %br
  %hr

  %h4 Please select contacts to attend this meeting
  - for c in Contact.all
    = check_box_tag "contact_ids[]", c.id, @meeting.contacts.include?(c)
    = c.first_name
    %br
  %br
  %hr

  %script#application{:type => "text/x-emblem"}



  %br
  %h4 Any follow Ups ?
  = f.simple_fields_for :follow_ups do |ff|
    = ff.input :type, collection: (FollowUp::TYPES), required: false
    = ff.input :done, as: :select , required: false
    = ff.input :status , required: false
    = ff.input :due_date , as: :date , required: false, disabled: true,
      hint: 'Only the assigned user can estimate the Due date.'
    = ff.input :complete_date, as: :date , required: false
    = ff.input :memo, as: :text ,:input_html => { :rows => 4 } , required: false
    = ff.input :sales_rep_id , label: "Assign to" , collection: (SalesRep.all)


    %select#s1
  = f.button :submit
:javascript
  window.sales_reps = #{ json_for @sales_reps, each_serializer: SalesRepSerializer }
  console.log(sales_reps);
  $.each(sales_reps,function(index, value){
    $('#s1').append('<option value="'+value.id+ '">'+value.first_name+'</option>');
  });


<!-- <%= f.collection_select :client_id, Client.all, :id, :name %> -->